
GFG Link - https://practice.geeksforgeeks.org/problems/7366ce450d84b55391fc787a681c4d60de359e72/1

1) BFS -

// User function Template for C++

class Solution {
  public:
    int shortestXYDist(vector<vector<char>> grid, int N, int M) {
        vector<pair<int,int>> x;
        vector<pair<int,int>> y;
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid[i][j]=='X'){
                    x.push_back({i,j});
                }
                else if(grid[i][j]=='Y'){
                    y.push_back({i,j});
                }
            }
        }
        
        int ans=INT_MAX;
        
        for(auto xi:x){
            int xf = xi.first;
            int xs = xi.second;
            
            for(auto yj:y){
                int yf = yj.first;
                int ys = yj.second;
                
                ans=min(ans,abs(xf-yf)+abs(xs-ys));
            }
        }
      return ans;    
    }
};

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) DP - 

// User function Template for C++

class Solution {
  public:
    int shortestXYDist(vector<vector<char>> grid, int N, int M) {
        int ans=INT_MAX;
        vector<vector<int>> dp(N, vector<int>(M,INT_MAX));
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid[i][j]=='X'){
                    dp[i][j]=0;
                    continue;
                }
                
                int minDist = INT_MAX;
                if(i+1<N){
                    minDist = min(minDist,dp[i+1][j]);
                }
                if(i-1>=0){
                    minDist = min(minDist,dp[i-1][j]);
                }
                if(j+1<M){
                    minDist = min(minDist,dp[i][j+1]);
                }
                if(j-1>=0){
                    minDist = min(minDist,dp[i][j-1]);
                }
                
                if(minDist!=INT_MAX){
                    dp[i][j]=minDist+1;
                }
            }
        }
        
        for(int i=N-1;i>=0;i--){
            for(int j=M-1;j>=0;j--){
                if(grid[i][j]=='X'){
                    dp[i][j]=0;
                    continue;
                }
                
                int minDist = INT_MAX;
                if(i+1<N){
                    minDist = min(minDist,dp[i+1][j]);
                }
                if(i-1>=0){
                    minDist = min(minDist,dp[i-1][j]);
                }
                if(j+1<M){
                    minDist = min(minDist,dp[i][j+1]);
                }
                if(j-1>=0){
                    minDist = min(minDist,dp[i][j-1]);
                }
                
                if(minDist!=INT_MAX){
                    dp[i][j]=min(dp[i][j],minDist+1);
                }
            }
        }
        
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                if(grid[i][j]=='Y'){
                    ans=min(ans,dp[i][j]);
                }
            }
        }
      return ans;    
    }
};
