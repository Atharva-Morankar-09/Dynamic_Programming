
CodeStudio - https://www.codingninjas.com/codestudio/problems/maximum-path-sum-in-the-matrix_797998?leftPanelTab=0

1) Recursion :

#include<bits/stdc++.h>
int rec(vector<vector<int>> matrix,int i, int j)
{
    if(j<0 || j>=matrix[0].size())
    {
        return -1e9;
    }
    if(i==0)
    {
        return matrix[i][j];
    }
    
    int ld=matrix[i][j]+rec(matrix,i-1,j+1);
    int rd=matrix[i][j]+rec(matrix,i-1,j-1);
    int d=matrix[i][j]+rec(matrix,i-1,j);
    return max(d,max(ld,rd));
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int ans=-1e9;
    for(int i=0;i<m;i++)
    {
        ans=max(ans,rec(matrix,n-1,i));
    }
    return ans;            
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Memoization :

#include<bits/stdc++.h>
int rec(vector<vector<int>> matrix,int i, int j, vector<vector<int>>& dp)
{
    if(j<0 || j>=matrix[0].size())
    {
        return -1e9;
    }
    if(i==0)
    {
        return matrix[i][j];
    }
    
    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }
    
    int ld=matrix[i][j]+rec(matrix,i-1,j+1,dp);
    int rd=matrix[i][j]+rec(matrix,i-1,j-1,dp);
    int d=matrix[i][j]+rec(matrix,i-1,j,dp);
    return dp[i][j]=max(d,max(ld,rd));
}

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int ans=-1e9;
    vector<vector<int>> dp(n+1,vector<int> (m+1,-1));
    for(int i=0;i<m;i++)
    {
        ans=max(ans,rec(matrix,n-1,i,dp));
    }
    return ans;            
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Tabulation :

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    int dp[n][m];
    for(int j=0;j<m;j++)
    {
        dp[0][j]=matrix[0][j];
    }
    
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<m;j++)
        {
            int dl,dr;
            int d=matrix[i][j]+dp[i-1][j];
            if(j>0)
            {
                dl=matrix[i][j]+dp[i-1][j-1];
            }
            else
            {
                dl=matrix[i][j]+(-1e9);
            }
            if(j<m-1)
            {
                dr=matrix[i][j]+dp[i-1][j+1];
            }
            else
            {
                dr=matrix[i][j]+(-1e9);
            }
            dp[i][j]=max(d,max(dl,dr));
        }
    }
    int ans=dp[n-1][0];
    for(int j=1;j<m;j++)
    {
        ans=max(ans,dp[n-1][j]);
    }
   return ans; 
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Space Optimization :

int getMaxPathSum(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    vector<int> prev(m);
    for(int j=0;j<m;j++)
    {
        prev[j]=matrix[0][j];
    }
    
    for(int i=1;i<n;i++)
    {
        vector<int> curr(m);
        for(int j=0;j<m;j++)
        {
            int dl,dr;
            int d=matrix[i][j]+prev[j];
            if(j>0)
            {
                dl=matrix[i][j]+prev[j-1];
            }
            else
            {
                dl=matrix[i][j]+(-1e9);
            }
            if(j<m-1)
            {
                dr=matrix[i][j]+prev[j+1];
            }
            else
            {
                dr=matrix[i][j]+(-1e9);
            }
            curr[j]=max(d,max(dl,dr));
        }
        prev=curr; 
    }
    int ans=prev[0];
    for(int j=1;j<m;j++)
    {
        ans=max(ans,prev[j]);
    }
   return ans; 
}
