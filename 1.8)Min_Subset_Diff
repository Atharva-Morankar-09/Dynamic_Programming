
GFG - https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1

// S = s1+s2 = s1+S-s1 
   Abs Min Diff = S-s1-s1 = S-2s1 
   As S>=2s1, Thus we need s1 such that its less than or equal to half of sum

class Solution{
  public:
    int rec(int n, int arr[], int sum)
    {
        bool dp[n+1][sum+1];
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(i==0)
                {
                    dp[i][j]=false;
                }
                if(j==0)
                {
                    dp[i][j]=true;
                }
            }
        }
        
        
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=sum;j++)
            {
                if(arr[i-1]<=j)
                {
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }
                else
                {
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        vector<int> val;                                         /* int ans=0
        for(int j=0;j<=sum/2;j++)                                   for(int j=sum/2;j>=0;j--)
        {                                                           { 
            if(dp[n][j])                                                if(dp[n][j])
            {                                                           {
                val.push_back(j);                                          ans=sum-2*j;
            }                                                              break;
        }                                                               }
                                                                    }
        int ans=INT_MAX;                                            return ans;   */
        for(int i=0;i<val.size();i++)                              
        {
            ans=min(ans,sum-2*val[i]);
        }
      return ans;    
    }
    
	int minDifference(int arr[], int n)  { 
	    int sum=0;
	    for(int i=0;i<n;i++)
	    {sum+=arr[i];}
	    return rec(n,arr,sum);
	} 
};
