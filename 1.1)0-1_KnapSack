
GFG Link - https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

1) Recursion :
Gives TLE (1137/1210)

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        if(W==0 || n==0)
        {
            return 0;
        }
        
        if(wt[n-1]<=W)
        {
            return max(val[n-1] + knapSack(W-wt[n-1],wt,val,n-1), knapSack(W,wt,val,n-1));
        }
        
        else if(wt[n-1]>W)
        {
            return knapSack(W,wt,val,n-1);
        }
    }
};

2) Memoization :
2D-Array

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int dp[1001][1001];
    Solution()
    {
        memset (dp,-1,sizeof(dp));
    } 
    int knapSack(int W, int wt[], int val[], int n) 
    { 
        if(W==0 || n==0)
        {
            return 0;
        }
        
        if(dp[W][n]!=-1)
        {
            return dp[W][n];
        }
        
        if(wt[n-1]<=W)
        {
            return dp[W][n] = max(val[n-1] + knapSack(W-wt[n-1],wt,val,n-1), knapSack(W,wt,val,n-1));
        }
        
        else if(wt[n-1]>W)
        {
            return dp[W][n] = knapSack(W,wt,val,n-1);
        }
    }
};

3) Tabulation :

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int w, int wt[], int val[], int n) 
    { 
       int dp[n+1][w+1];
       for(int i=0;i<n+1;i++)
       {
           for(int j=0;j<w+1;j++)
           {
               if(i==0 || j==0)
               {
                   dp[i][j]=0;
               }
           }
       }
       
       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=w;j++)
           {
               if(wt[i-1]<=j)
               {
                   dp[i][j] = max(val[i-1] + dp[i-1][j-wt[i-1]], dp[i-1][j]);
               }
               else
               {
                   dp[i][j] = dp[i-1][j];
               }
           }
       }
     return dp[n][w];  
    }
};
