
GFG - https://practice.geeksforgeeks.org/problems/boolean-parenthesization5610/1

1) Recursion -

class Solution{
public:

    int rec(int i, int j, string s, bool isTrue){
        if(i>j){
            return 0;
        }
        
        if(i==j)
        {
            if(isTrue==true){
                return s[i]=='T';
            }
            else{
                return s[i]=='F';
            }
        }
        
        int ans=0;
        
        for(int k=i+1;k<=j-1;k+=2)
        {
            int lt = rec(i,k-1,s,true);
            int lf = rec(i,k-1,s,false);
            int rt = rec(k+1,j,s,true);
            int rf = rec(k+1,j,s,false);
            
            if(s[k]=='&'){
                if(isTrue==true){
                    ans+=lt*rt;
                }
                else{
                    ans+=lt*rf+lf*rt+lf*rf;
                }
            }
            else if(s[k]=='|'){
                if(isTrue==true){
                    ans+=lt*rt+lt*rf+lf*rt;
                }
                else{
                    ans+=lf*rf;
                }
            }
            else{
                if(isTrue==true){
                    ans+=lt*rf+lf*rt;
                }
                else{
                    ans+=lt*rt+lf*rf;
                }
            }
        }
      return ans;    
    }

    int countWays(int N, string S){
        return rec(0,N-1,S,true);
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Memoization - 

// User function Template for C++

class Solution{
public:

    unordered_map<string,int>mp;

    int rec(int i, int j, string s, bool isTrue){
        if(i>j){
            return 0;
        }
        
        if(i==j)
        {
            if(isTrue==true){
                return s[i]=='T';
            }
            else{
                return s[i]=='F';
            }
        }
        
        int ans=0;
        
        string chk=to_string(i)+"_"+to_string(j)+"_"+to_string(isTrue);
        
        if(mp.find(chk)!=mp.end()){
            return mp[chk];
        }
        
        for(int k=i+1;k<=j-1;k+=2)
        {
            int lt = rec(i,k-1,s,true);
            int lf = rec(i,k-1,s,false);
            int rt = rec(k+1,j,s,true);
            int rf = rec(k+1,j,s,false);
            
            if(s[k]=='&'){
                if(isTrue==true){
                    ans+=lt*rt;
                }
                else{
                    ans+=lt*rf+lf*rt+lf*rf;
                }
            }
            else if(s[k]=='|'){
                if(isTrue==true){
                    ans+=lt*rt+lt*rf+lf*rt;
                }
                else{
                    ans+=lf*rf;
                }
            }
            else{
                if(isTrue==true){
                    ans+=lt*rf+lf*rt;
                }
                else{
                    ans+=lt*rt+lf*rf;
                }
            }
        }
        
      return mp[chk]=ans%1003;    
    }

    int countWays(int N, string S){
        mp.clear();
        return rec(0,N-1,S,true);
    }
};
