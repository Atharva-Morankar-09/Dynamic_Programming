
CodeStudio - https://www.codingninjas.com/codestudio/problems/triangle_1229398?leftPanelTab=0

1) Recursion :

#include<bits/stdc++.h>
int rec(int i, int j, vector<vector<int>> triangle, int n)
{
    if(i==n-1)
    {
        return triangle[i][j];
    }
    
    int down = triangle[i][j] + rec(i+1,j,triangle,n);
    int diag = triangle[i][j] + rec(i+1,j+1,triangle,n);
    
    return min(down,diag);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	return rec(0,0,triangle,n);
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Memoization :

#include<bits/stdc++.h>
int rec(int i, int j, vector<vector<int>> triangle, int n, vector<vector<int>>& dp)
{
    if(i==n-1)
    {
        return triangle[i][j];
    }
    
    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }
    
    int down = triangle[i][j] + rec(i+1,j,triangle,n,dp);
    int diag = triangle[i][j] + rec(i+1,j+1,triangle,n,dp);
    
    return dp[i][j] = min(down,diag);
}

int minimumPathSum(vector<vector<int>>& triangle, int n){
	vector<vector<int>> dp(n+1, vector<int> (n+1,-1));
    return rec(0,0,triangle,n,dp);
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Tabulation :

int minimumPathSum(vector<vector<int>>& triangle, int n){
    int dp[n][n];
    for(int i=0;i<n;i++)
    {
        dp[n-1][i] = triangle[n-1][i];
    }
    for(int i=n-2;i>=0;i--)
    {
        for(int j=i;j>=0;j--)
        {
            int down = triangle[i][j] + dp[i+1][j];
            int diag = triangle[i][j] + dp[i+1][j+1];
            dp[i][j] = min(down,diag);
        }
    }
   return dp[0][0]; 
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Space Optimization :

int minimumPathSum(vector<vector<int>>& triangle, int n){
    vector<int> last(n);
    for(int i=0;i<n;i++)
    {
        last[i] = triangle[n-1][i];
    }
    for(int i=n-2;i>=0;i--)
    {
        vector<int> curr(n);
        for(int j=i;j>=0;j--)
        {
            int down = triangle[i][j] + last[j];
            int diag = triangle[i][j] + last[j+1];
            curr[j] = min(down,diag);
        }
       last = curr; 
    }
   return last[0]; 
}
