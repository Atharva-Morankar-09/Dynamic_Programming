
Leetcode - https://leetcode.com/problems/unique-paths-ii/

1) Recursion:
TLE

class Solution {
public:    
    int rec(vector<vector<int>>& og, int i, int j)
    {
        if(i>=0 && j>=0 && og[i][j]==1)
        {return 0;}
        if(i==0 && j==0)
        {
            return 1;
        }
        if(i<0 || j<0)
        {
            return 0;
        }
        int left = rec(og,i-1,j);
        int up = rec(og,i,j-1);
        return left+up;
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int i=og.size();
        int j=og[0].size();
        return rec(og,i-1,j-1);
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Memoization :

class Solution {
public:
    int rec(vector<vector<int>>& og, int i, int j, vector<vector<int>>& dp)
    {
        if(i>=0 && j>=0 && og[i][j]==1)
        {return 0;}
        if(i==0 && j==0)
        {
            return 1;
        }
        if(i<0 || j<0)
        {
            return 0;
        }
        
        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }
        int left = rec(og,i-1,j,dp);
        int up = rec(og,i,j-1,dp);
        return dp[i][j]=left+up;
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int i=og.size();
        int j=og[0].size();
        vector<vector<int>> dp(i, vector<int> (j,-1));
        return rec(og,i-1,j-1,dp);
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Tabulation :

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int n=og.size();
        int m=og[0].size();
        int dp[n+1][m+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(i>=0 && j>=0 && og[i][j]==1)
                {
                    dp[i][j]=0;
                }
                else if(i==0 && j==0)
                {
                    dp[i][j]=1;
                }
                else
                {
                    int up=0,left=0;
                    if(i>0)
                    {
                        up=dp[i-1][j];
                    }
                    if(j>0)
                    {
                        left=dp[i][j-1];
                    }
                   dp[i][j]=up+left; 
                }
            }
        }
      return dp[n-1][m-1];  
    }
};

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) Space Optimization :

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& og) {
        int n=og.size();
        int m=og[0].size();
        vector<int> prev(m);
        for(int i=0;i<n;i++)
        {
            vector<int> curr(m);
            for(int j=0;j<m;j++)
            {
                if(i>=0 && j>=0 && og[i][j]==1)
                {
                    curr[j]=0;
                }
                else if(i==0 && j==0)
                {
                    curr[j]=1;
                }
                else
                {
                    int up=0,left=0;
                    if(i>0)
                    {
                        up=prev[j];
                    }
                    if(j>0)
                    {
                        left=curr[j-1];
                    }
                   curr[j]=up+left; 
                }
            }
           prev=curr; 
        }
      return prev[m-1];  
    }
};
