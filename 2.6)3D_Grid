
CodeStudio - https://www.codingninjas.com/codestudio/problems/ninja-and-his-friends_3125885?leftPanelTab=0

1) Recursion : 

int rec(int i, int j1, int j2, vector<vector<int>> grid)
{
    if(j1<0 || j1>=grid[0].size() || j2<0 || j2>=grid[0].size())
    {
        return -1e9;
    }
    if(i==grid.size()-1)
    {
        if(j1==j2)
        {
            return grid[i][j1];
        }
        else
        {
            return grid[i][j1]+grid[i][j2];
        }
    }
    
    int ans=0;
    for(int n=-1;n<=1;n++)
    {
        for(int m=-1;m<=1;m++)
        {
            if(j1==j2)
            {
                ans=max(ans,grid[i][j1]+rec(i+1,j1+n,j2+m,grid));
            }
            else
            {
                ans=max(ans,grid[i][j1]+grid[i][j2]+rec(i+1,j1+n,j2+m,grid));
            }
        }
    }
   return ans; 
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    return rec(0,0,c-1,grid);
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Memoization :

int rec(int i, int j1, int j2, vector<vector<int>> grid, vector<vector<vector<int>>>& dp)
{
    if(j1<0 || j1>=grid[0].size() || j2<0 || j2>=grid[0].size())
    {
        return -1e9;
    }
    if(i==grid.size()-1)
    {
        if(j1==j2)
        {
            return grid[i][j1];
        }
        else
        {
            return grid[i][j1]+grid[i][j2];
        }
    }
    
    if(dp[i][j1][j2]!=-1)
    {
        return dp[i][j1][j2];
    }
    
    int ans=0;
    for(int n=-1;n<=1;n++)
    {
        for(int m=-1;m<=1;m++)
        {
            if(j1==j2)
            {
                ans=max(ans,grid[i][j1]+rec(i+1,j1+n,j2+m,grid,dp));
            }
            else
            {
                ans=max(ans,grid[i][j1]+grid[i][j2]+rec(i+1,j1+n,j2+m,grid,dp));
            }
        }
    }
   return dp[i][j1][j2]=ans; 
}

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    vector<vector<vector<int>>> dp(r+1, vector<vector<int>> (c+1, vector<int> (c+1,-1)));
    return rec(0,0,c-1,grid,dp);
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) Tabulation :

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    int dp[r][c][c];
    for(int j1=0;j1<c;j1++)
    {
        for(int j2=0;j2<c;j2++)
        {
            if(j1==j2)
            {
                dp[r-1][j1][j2]=grid[r-1][j1];
            }
            else
            {
                dp[r-1][j1][j2]=grid[r-1][j1]+grid[r-1][j2];
            }
        }
    }
    
    for(int i=r-2;i>=0;i--)
    {
        for(int j1=0;j1<c;j1++)
        {
            for(int j2=0;j2<c;j2++)
            {
                int ans=0;
                for(int di=-1;di<=1;di++)
                {
                    for(int dj=-1;dj<=1;dj++)
                    {
                        int val;
                        if(j1==j2)
                        {
                            val = grid[i][j1];
                        }
                        else
                        {
                            val = grid[i][j1]+grid[i][j2];
                        }
                           
                       if((j1+di<0 || j1+di>=c) || (j2+dj<0 || j2+dj>=c))
                       {
                          val+=-1e9;
                       }
                        else
                        {
                            val+=dp[i+1][j1+di][j2+dj];
                        }
                       ans=max(ans,val); 
                    }
                }
                dp[i][j1][j2]=ans;
            }
        }
    }
   return dp[0][0][c-1]; 
}
