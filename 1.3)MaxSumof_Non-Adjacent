
Maximum sum of non-adjacent elements - https://www.codingninjas.com/codestudio/problems/maximum-sum-of-non-adjacent-elements_843261

1) Recursion : 
Gives TLE 

#include<bits/stdc++.h>
int rec(int n, vector<int>& nums)
{
    if(n==0)
    {
        return nums[0];
    }
    if(n<0)
    {
        return 0;
    }
    
    int take = nums[n] + rec(n-2,nums);
    int notTake = 0 + rec(n-1,nums);
    
    return max(take,notTake);
}

int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    return rec(n-1,nums);
}

2) Memoization : 

#include<bits/stdc++.h>
int rec(int n, vector<int>& nums, vector<int>& dp)
{
    if(n==0)
    {
        return nums[0];
    }
    if(n<0)
    {
        return 0;
    }
    
    if(dp[n]!=-1)
    {
        return dp[n];
    }
    
    int take = nums[n] + rec(n-2,nums,dp);
    int notTake = 0 + rec(n-1,nums,dp);
    
    return dp[n] = max(take,notTake);
}

int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    vector<int> dp(n+1,-1);
    return rec(n-1,nums,dp);
}

3) Tabulation : 

int maximumNonAdjacentSum(vector<int> &nums){
    int n=nums.size();
    vector<int> dp(n,0);
    dp[0]=nums[0];
    for(int i=1;i<n;i++)
    {
        int take = nums[i];
        if(i>1)
        {
            take+=dp[i-2];
        }
        int notTake = 0 + dp[i-1];
        dp[i]=max(take,notTake);
    }
   return dp[n-1]; 
}

4) Space Optimization :

int maximumNonAdjacentSum(vector<int> &nums){
    int prev=nums[0],prev1=0;
    for(int i=0;i<nums.size();i++)
    {
        int take = nums[i];
        if(i>1)
        {
            take+=prev1;
        }
        int notTake = prev;
        int curr=max(take,notTake);
        prev1=prev;
        prev=curr;
    }
   return prev; 
}
